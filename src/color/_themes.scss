@use "../base/vars_base" as *;
@use "../base/vars_colors" as *;
@use "../functions/colorFunctions" as *;
@use "../functions/mapMerge" as *;
@use "../mixins/extendedThemeClass" as *;
@use "../mixins/utilityClasses" as *;
@use "../mixins/helpers" as *; // index

// ---------------- BEFORE YOU DO ANYTHING CRAZY ------------------
// There is a fair bit going on here and the BUILD ORDER MATTERS.
// Make sure you read the comments before making any changes.
// ----------------------------------------------------------------

$alert-theme: (
    "danger-light": (
        "base": hsl(0, 100%, 95%),
        "border-color": hsl(0, 100%, 81%),
        "color": hsl(0, 100%, 15%),
        "title-color": hsl(0, 100%, 30%),
    ),
    "info-light": (
        "base": hsl(211, 94%, 94%),
        "border-color": hsl(211, 94%, 81%),
        "color": hsl(211, 94%, 15%),
        "title-color": hsl(211, 94%, 30%),
    ),
    "warning-light": (
        "base": hsl(50, 92%, 95%),
        "border-color": hsl(50, 92%, 45%),
        "color": hsl(50, 92%, 21%),
        "title-color": hsl(50, 92%, 35%),
    ),
    "success-light": (
        "base": hsl(142, 61%, 92%),
        "border-color": hsl(142, 61%, 81%),
        "color": hsl(142, 61%, 15%),
        "title-color": hsl(142, 62%, 25%),
    ),
);

// Convert all the colors into a usable map of maps to create
// extended themes.
//
// NK?? THINK! Do you really want to extend every theme?

$themes-map: ();

@each $color, $value in $color-map {
    $themes-map: map-merge(
        $themes-map,
        (
            $color: (
                "base": $value,
            ),
        )
    );
}

// add additional styles to override created styles
$extended-theme-overrides: (
    // "primary": (
    //     "base": $primary,
    // ),
) !default;

// ----------------------------------------------------------------
// -- CREATE EXTENDED COLOR SCHEMES --
// ----------------------------------------------------------------
// extended maps add extra element styles and classes. For example,
// `withState`, `bx-title` and link-colors.
//
// To prevent duplication make sure the `$extended-themes` are
// created first.

// $extended-themes: mapMerge($alert-theme, $extended-theme-overrides);

// The order matters here, overrides must go last!
$extended-themes: mapMerge($alert-theme, $themes-map, $extended-theme-overrides);

@each $theme-name, $map in $extended-themes {
    @include extendedThemeClass($theme-name, $map);
}

// ----------------------------------------------------------------
// -- CREATE BASIC COLOR SCHEMES --
// ----------------------------------------------------------------
// To prevent duplication make sure the `$extended-themes` are
// created first.

@each $key, $value in $color-map {
    // exclude if $key already in the $extended-themes
    @if (not map-has-key($extended-themes, $key)) {
        .#{$key} {
            @include basicColorScheme($value);
        }
    }
}

// ----------------------------------------------------------------
// -- CREATE UTILITY CLASSES --
// ----------------------------------------------------------------

// this could arguably be removed and just use base colors?? maybe
// leave main theme colors like primary, secondary, and accent
@include utilityClasses(background-color, $theme-colors, "bg");
@include utilityClasses(background-color, $base-colors, "bg");
