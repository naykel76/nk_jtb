@use '../functions/classes' as *;
@use '../mixins/media' as *;
@use '../mixins/property-makers' as *;
@use 'sass:map';



// ==========================================================================
// Generate class for a single property and optionally creates responsive
// classes for a range of breakpoints.
// --------------------------------------------------------------------------
// NOTE: This mixin will create the base class as well as responsive classes.
// ==========================================================================
@mixin make-single-property-class($class-name, $property, $value, $breakpoints: ()) {
    .#{$class-name} {
        #{$property}: $value;
    }

    @if $breakpoints {
        @include make-from-breakpoint(($property: $value), $class-name, $breakpoints);
    }
}

// ==========================================================================
// Generate responsive class for one or more properties, starting FROM the
// specified breakpoints, across a range of breakpoints.
// --------------------------------------------------------------------------
// 
// ==========================================================================
@mixin make-from-breakpoint($props, $identifier, $breakpoints) {
    @each $bp in $breakpoints {
        $derived-class: #{$bp}\:#{$identifier};
        .#{$derived-class} {
            @if $bp == 'sm' {
                @include from-sm {
                    @include make-properties($props);
                }
            } @else if $bp == 'md' {
                @include from-md {
                    @include make-properties($props);
                }
            } @else if $bp == 'lg' {
                @include from-lg {
                    @include make-properties($props);
                }
            } @else if $bp == 'xl' {
                @include from-xl {
                    @include make-properties($props);
                }
            } @else if $bp == 'xxl' {
                @include from-xxl {
                    @include make-properties($props);
                }
            }
        }
    }
}

// ==========================================================================
// Generate responsive classes for one or more properties, up TO the specified
// breakpoints, across a range of breakpoints.
// --------------------------------------------------------------------------
// 
// @param {Map} $props - The map of properties and values.
// @param {String} $identifier - A part of the base class name.
// @param {List} $breakpoints - The list of breakpoints.
// ==========================================================================
@mixin make-to-breakpoint($props, $identifier, $breakpoints) {
    @each $bp in $breakpoints {
        $derived-class: #{$bp}\:#{$identifier};
        .to-#{$derived-class} {
            @if $bp == 'sm' {
                @include to-sm {
                    @include make-properties($props);
                }
            } @else if $bp == 'md' {
                @include to-md {
                    @include make-properties($props);
                }
            } @else if $bp == 'lg' {
                @include to-lg {
                    @include make-properties($props);
                }
            } @else if $bp == 'xl' {
                @include to-xl {
                    @include make-properties($props);
                }
            } @else {
                @error 'The device '#{$bp}' is not available for this mixin, you need to remove it from the args list.';
            }
        }
    }
}


// ==========================================================================
// Generate responsive classes for one or more properties, starting ON the
// specified breakpoints, across a range of breakpoints.
// --------------------------------------------------------------------------
// 
// ==========================================================================
@mixin make-on-breakpoint($props, $identifier, $breakpoints) {
    @each $bp in $breakpoints {
        $derived-class: #{$bp}\:#{$identifier};
        .on-#{$derived-class} {
            @if $bp == 'sm' {
                @include on-sm {
                    @include make-properties($props);
                }
            } @else if $bp == 'md' {
                @include on-md {
                    @include make-properties($props);
                }
            } @else if $bp == 'lg' {
                @include on-lg {
                    @include make-properties($props);
                }
            } @else if $bp == 'xl' {
                @include on-xl {
                    @include make-properties($props);
                }
            } @else if $bp == 'xxl' {
                @include on-xxl {
                    @include make-properties($props);
                }
            }
        }
    }
}



// 1. initialise props to be used for responsive classes
// 2. pass in identifier to strip-invalid to remove unwanted characters
// 3. merge the props for each position into a single map so it can
//    be used for responsive classes which expects a map of props
//    not a seperate `property` and `value

@mixin make-position-based-class($property, $value, $positions-map, $identifier, $variant, $breakpoints) {
    @each $axis-or-position-key, $positions in $positions-map {
        $props: (); // 1.
        $derived-class: strip-class-suffixes(#{$identifier}#{$axis-or-position-key}-#{$variant}, $identifier); // 2.

        .#{$derived-class} {
            @each $position in $positions {
                #{$property}-#{$position}: #{$value};

                $props: map.merge($props, (#{$property}-#{$position}: $value)); // 3.
            }
        }

        @if $breakpoints {
            @include make-from-breakpoint($props, $derived-class, $breakpoints);
        }
    }
}