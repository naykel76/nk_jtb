/// Creates a single CSS property with a given value.
///
/// ### Use Case
/// Commonly used to recursively generate CSS properties.
///
/// @group property-makers
///
/// @param {String} $property - The CSS property to generate.
/// @param {String} $value - The value for the CSS property including units.
///
/// @example scss - Usage
///     .element {
///         @include create-property(background-color, red);
///     }
///
/// @example css - Output
///     .element {
///         background-color: red;
///     }
///

@mixin create-property($property, $value) {
    #{$property}: $value;
}

/// Create one or more properties from a map of key-value pairs.
///
/// ### Use Case
/// Commonly used to generate multiple CSS properties from a map of key-value pairs.
///
/// @group property-makers
///
/// @param {Map} $props - The map of properties and values.
///
/// @example scss - Usage
///     .my-class {
///         @include create-properties((color: blue, background-color: white));
///     }
///
/// @example css - Output
///     .my-class {
///         color: blue;
///         background-color: white;
///     }
///

@mixin create-properties($props) {
    @each $property, $value in $props {
        @include create-property($property, $value);
    }
}

//
//
//
// NEED TO ADD TO SASS DOC
//
//
//

// ==========================================================================
// Generate properties based on positional requirements. For
// example, when `margin-top` requires a value for `top`, and
// `margin-x` requires values for `left` and `right`.
// ==========================================================================
// This mixin iterates through a list of positions, creating the
// appropriate property (e.g., `top`, `bottom`, `left`, `right`)
// based on the provided value.
//
// You can specify the unit of measurement with the optional `$unit`
// parameter, with the default unit being "rem".

@mixin create-position-properties($property, $value, $positions, $unit: 'rem') {
    @each $position in $positions {
        $derivedUnit: if(($value == 'auto' or $value == 0), null, $unit);
        #{$property}-#{$position}: #{$value}#{$derivedUnit};
    }
}
