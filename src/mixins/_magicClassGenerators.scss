@use "../mixins/class-helpers" as *;
@use "../mixins/media" as *;
@use "../variables/utility_maps" as *;
@use "sass:list";

// ==========================================================================
// -- HELPER MIXIN FOR MAGIC CLASSES --
// ==========================================================================
// NOTE: the values do not include the unit!! These mixins will always use rem
// as the unit. I don't see this as a problem because all the classes that use
// these mixins will be using rem as the unit. If you need to use a different
// unit, you will need to create a new mixin or revise to allow for different
// units

@mixin handleMagicProperties($property, $value, $positions) {
    @if ($positions == "" or $positions == null) {
        // always uses rem as the unit
        $unit: rem;
        @include createSingleProperty($property, #{$value}#{$unit});
    } @else {
        @include createPositionProperties($property, $value, $positions);
    }
}

@function derivedClass($list) {
    $numBreakPoints: list.length($list);

    $baseValue: nth($list, -1);
    $smValue: nth($list, -2);
    $mdValue: if($numBreakPoints >= 3, nth($list, -3), null);
    $lgValue: if($numBreakPoints >= 4, nth($list, -4), null);
    $xlValue: if($numBreakPoints >= 5, nth($list, -5), null);
    $xxlValue: if($numBreakPoints >= 6, nth($list, -6), null);

    @if ($numBreakPoints == 2) {
        @return #{$smValue}-#{$baseValue};
    } @else if ($numBreakPoints == 3) {
        @return #{$mdValue}-#{$smValue}-#{$baseValue};
    } @else if ($numBreakPoints == 4) {
        @return #{$lgValue}-#{$mdValue}-#{$smValue}-#{$baseValue};
    } @else if ($numBreakPoints == 5) {
        @return #{$xlValue}-#{$lgValue}-#{$mdValue}-#{$smValue}-#{$baseValue};
    } @else if ($numBreakPoints == 6) {
        @return #{$xxlValue}-#{$xlValue}-#{$lgValue}-#{$mdValue}-#{$smValue}-#{$baseValue};
    }
}

// ==========================================================================
// -- GENERATE MAGIC CLASS FOR A SINGLE PROPERTY --
// ==========================================================================
// * `rem` is the default unit, pass in empty string to set to null

@mixin magicClass($property, $values-list, $identifier, $unit: "rem", $position-or-axis: "") {
    // get the positions required to build up the class
    // (x:(left, right), y:(top, bottom) ... etc)
    $positions: map-get($axis-position-map, $position-or-axis);

    @each $list in $values-list {
        // exclude empty list when creating single list
        @if ($list != ()) {
            $numBreakPoints: list.length($list);

            // set the value of the BP based on position using negative
            // numbers. This makes sure the position is always the same
            $baseValue: nth($list, -1);
            $smValue: nth($list, -2);
            $mdValue: if($numBreakPoints >= 3, nth($list, -3), null);
            $lgValue: if($numBreakPoints >= 4, nth($list, -4), null);

            $derived-class: derivedClass($list);

            // DO NOT use else-if statements when building the classes.
            // You want to give all classes to the opportunity to build.
            .#{$identifier}-#{$derived-class} {
                @include handleMagicProperties($property, $baseValue, $positions);

                @include from-sm {
                    @include handleMagicProperties($property, $smValue, $positions);
                }

                @if ($numBreakPoints >= 3) {
                    @include from-md {
                        @include handleMagicProperties($property, $mdValue, $positions);
                    }
                }

                @if ($numBreakPoints >= 4) {
                    @include from-lg {
                        @include handleMagicProperties($property, $lgValue, $positions);
                    }
                }

                @if ($numBreakPoints >= 5) {
                    @include from-xl {
                        @include handleMagicProperties($property, $xlValue, $positions);
                    }
                }
                // I don't see the need to cover xxl, I think this is too much
                // and you would be better off using responsive classes
            }
        }
    }
}
