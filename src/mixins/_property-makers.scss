/// Creates a single CSS property with a given value.
///
/// ### Use Case
/// Commonly used to recursively generate CSS properties.
///
/// @group property-makers
///
/// @param {String} $property - The CSS property to generate.
/// @param {String} $value - The value for the CSS property including units.
///
/// @example scss - Usage
///     .element {
///         @include create-property(background-color, red);
///     }
///
/// @example css - Output
///     .element {
///         background-color: red;
///     }
///

@mixin create-property($property, $value) {
    #{$property}: $value;
}

/// Create one or more properties from a map of key-value pairs.
///
/// ### Use Case
/// Commonly used to generate multiple CSS properties from a map of key-value pairs.
///
/// @group property-makers
///
/// @param {Map} $props - The map of properties and values.
///
/// @example scss - Usage
///     .my-class {
///         @include make-properties((color: blue, background-color: white));
///     }
///
/// @example css - Output
///     .my-class {
///         color: blue;
///         background-color: white;
///     }
///

@mixin make-properties($props) {
    @each $property, $value in $props {
        @include create-property($property, $value);
    }
}


// ==========================================================================
// Generate a single directional property, e.g. margin-top or inset-left.
// Skips unit if value is 'auto' or 0.
// ==========================================================================

@mixin create-position-property($property, $value, $position, $unit: 'rem') {
    $derived-unit: if(($value == 'auto' or $value == 0), null, $unit);

    #{$property}-#{$position}: #{$value}#{$derived-unit};
}

// ==========================================================================
// Generate directional properties for a list of positions.
// Useful for applying the same value across multiple sides.
// ==========================================================================

@mixin create-position-properties($property, $value, $positions, $unit: 'rem') {
    @each $position in $positions {
        @include create-position-property($property, $value, $position, $unit);
    }
}
