@use '../v1/core-imports' as *;
@use '../v1/mixins/property-makers' as *;
@use '../v1/mixins/media' as *;
@use 'sass:list';
@use 'sass:map';

// ==========================================================================
// -- HELPER MIXIN FOR MAGIC CLASSES --
// ==========================================================================
// NOTE: the values do not include the unit!! These mixins will always use rem
// as the unit. I don't see this as a problem because all the classes that use
// these mixins will be using rem as the unit. If you need to use a different
// unit, you will need to create a new mixin or revise to allow for different
// units

@mixin handleMagicProperties($property, $value, $positions) {
    @if ($positions == '' or $positions == null) {
        // always uses rem as the unit
        $unit: rem;
        @include create-property($property, #{$value}#{$unit});
    } @else {
        @include create-position-properties($property, $value, $positions);
    }
}

// is parent indicates the class is applied to the parent element
@function derivedClass($identifier, $list, $is-parent) {
    $numBreakPoints: list.length($list);
    $class: null;
    @for $i from $numBreakPoints through 1 {
        $class: if($class == null, list.nth($list, -$i), #{$class}-#{list.nth($list, -$i)});
    }

    // if the class is a parent class, add the prefix
    @if $is-parent {
        $class: 'c-#{$identifier}-#{$class} > *';
    } @else {
        $class: '#{$identifier}-#{$class}';
    }

    @return $class;
}

////
/// @group class-generators
////

/// Generate one ore more magic classes for a single property from a list of /// lists.
///
/// **NOTE:** this mixin works with both position and unit based properties and
/// supports parent/child classes.
///
/// @param {String} $property - The CSS property.
/// @param {List} $values-list - The list of values for the property .
/// @param {String} $identifier - The base class name.
/// @param {String} $unit - The unit for the property values (default: "rem").
/// @param {String} $position-or-axis - The position or axis for the property (default: "").
/// @param {Boolean} $is-parent - Indicates if the class is applied to the parent
///

@mixin generate-magic-classes($property, $values-list, $identifier, $unit: 'rem', $position-or-axis: '', $is-parent: false) {
    // get the positions required to build up the class
    // (x:(left, right), y:(top, bottom) ... etc)
    $positions: map.get($axis-position-map, $position-or-axis);

    @each $list in $values-list {
        // exclude empty list when creating single list
        @if ($list != ()) {
            $numBreakPoints: list.length($list);

            // set the value of the BP based on position using negative
            // numbers. This makes sure the position is always the same
            $baseValue: list.nth($list, -1);
            $smValue: list.nth($list, -2);
            $mdValue: if($numBreakPoints >= 3, list.nth($list, -3), null);
            $lgValue: if($numBreakPoints >= 4, list.nth($list, -4), null);

            $derived-class: derivedClass($identifier, $list, $is-parent);

            // DO NOT use else-if statements when building the classes.
            // You want to give all classes to the opportunity to build.
            .#{$derived-class} {
                @include handleMagicProperties($property, $baseValue, $positions);

                @include from-sm {
                    @include handleMagicProperties($property, $smValue, $positions);
                }

                @if ($numBreakPoints >= 3) {
                    @include from-md {
                        @include handleMagicProperties($property, $mdValue, $positions);
                    }
                }

                @if ($numBreakPoints >= 4) {
                    @include from-lg {
                        @include handleMagicProperties($property, $lgValue, $positions);
                    }
                }

                @if ($numBreakPoints >= 5) {
                    @include from-xl {
                        @include handleMagicProperties($property, $xlValue, $positions);
                    }
                }
            }
        }
    }
}
