@use '../functions/classes' as *;
@use '../functions/strings' as *;
@use '../mixins/class-makers' as *;
@use '../mixins/property-makers' as *;
@use 'sass:list';
@use 'sass:map';
@use 'sass:string';

// ==========================================================================
// get-breakpoints()
// --------------------------------------------------------------------------
// Ensures a valid list of breakpoints is returned. Allows properties to define
// custom breakpoint sets, or fall back to a default set when none are provided.
// --------------------------------------------------------------------------
// Example:
//  - get-breakpoints(null) => ('sm', 'md', 'lg', 'xl')
//  - get-breakpoints(('xs', 'md')) => ('xs', 'md')
// ==========================================================================
@function get-breakpoints($breakpoints) {
    $default-breakpoints: ('sm', 'md', 'lg', 'xl');

    @return if($breakpoints == null, $default-breakpoints, $breakpoints);
}

@mixin build-composite-classes($properties-map, $responsive: false) {
    @each $class, $map in $properties-map {
        $props: map.get($map, 'props');
        $map-breakpoints: map.get($map, 'breakpoints'); // optional
        // if responsive is true, get the breakpoints from the map or use the default
        $breakpoints: if($responsive, get-breakpoints($map-breakpoints), $map-breakpoints);

        .#{$class} {
            @include make-properties($props);
        }

        @if $breakpoints {
            @include make-from-breakpoint($props, $class, $breakpoints);
        }
    }
}

// ==========================================================================
// Generates utility classes for CSS properties using a configuration map.
// Supports responsive variants, automatic value-unit handling, and
// position-based class.
// --------------------------------------------------------------------------
// 2. $derived-unit: Checks if the $value includes a unit (12px, 1em, 100vh,
//    etc.). If it does, $derived-unit is set to null. If it doesn't,
//    $derived-unit is set to $unit.This is used to prevent the unit from being
//    added twice when values include units.
// 3. $derived-value: This variable holds the processed value of the class,
//    which is derived from the original $value. It's created to ensure that the
//    class value is handled correctly based on its unit.
// 4. $derived-suffix: This variable combines the variant and the unit into a
//    single string. This creates the unique identifier which is used to create
//    the class name.
// ==========================================================================

// prettier-ignore
@mixin build-property-classes($properties-map, $responsive: false) {
    @each $property, $map in $properties-map {
        $map-values: map.get($map, "values");
        $map-unit: map.get($map, "unit"); 
        $map-positions: map.get($map, "positions"); 
        $map-breakpoints: map.get($map, "breakpoints"); 

        // if the prefix is specifically omitted, use an empty string
        // otherwise, use the prefix from the map or the property name with a dash
        $prefix: if( map.get($map, 'omit-prefix'), '',
            if(map.has-key($map, 'prefix'), map.get($map, 'prefix'), $property + '-')
        );

        // If responsive is true, resolve breakpoints (using defaults);
        // otherwise, use breakpoints from the map as provided (may be null).
        $breakpoints: if($responsive, get-breakpoints($map-breakpoints), $map-breakpoints);
   
        @each $key, $value in $map-values {
            // Normalise each item to ensure it has a valid variant and value
            // for consistent class generation.
            $item: normalise-variant-value($key, $value);
            $label: list.nth($item, 1);
            $value: list.nth($item, 2);
            
            // Create the derived class name and value based on the map values.
            $derived-unit: if(value-has-unit($value), null, ($map-unit)); // 2.
            $derived-value: #{handle-class-value($value, $derived-unit)}; // 3.
            $derived-suffix: #{$label}#{handle-class-unit($derived-unit)}; // 4.

            $derived-class: strip-class-suffixes(#{$prefix}#{$derived-suffix});

            // DO NOT DELETE THIS, IT IS FOR DEBUGGING PURPOSES
            // item-details{
            //     content: "Property: #{$property}"; 
            //     content: "Prefix: #{$prefix}"; 
            //     content: "Label: #{$label}";
            //     content: "Value: #{$value}";
            //     content: ------------------------------;
            //     content: "Derived Suffix: #{$derived-suffix}";
            //     content: "Derived Unit: #{$derived-unit}";
            //     content: "Derived Value: #{$derived-value}";
            // }

            @if $map-positions {
                @include make-position-based-class($property, $derived-value, $map-positions, $prefix, $derived-suffix, $breakpoints);
            } @else{
                @include make-single-property-class(#{$derived-class}, $property, #{$derived-value}, $breakpoints);
            }
        }
    }
}
