@use "../base/vars_colors" as *;
@use "../functions/colorFunctions" as *;
@use "../mixins/helpers/basicColorScheme" as *;
@use "../scss/mixins/createState" as *;
@use "../utilities/transition" as *;

// The minimum requirement for creating a map is the $base color,
// all other properties can be created intuitively.
//
// set default values based on the user defined styles in the map,
// or intuitively create based on the `base` if not exists

@mixin extendedThemeClass($identifier, $map) {
    $base: map-get($map, "base");

    $color: if(map-get($map, "color"), map-get($map, "color"), setTextColor($base));
    $border-color: if(map-get($map, "border-color"), map-get($map, "border-color"), setBorderShadeColor($base));

    $hover-bg: if(map-get($map, "hover-bg"), map-get($map, "hover-bg"), darken($base, 15%));
    $hover-color: if(map-get($map, "hover-color"), map-get($map, "hover-color"), setTextColor($hover-bg));

    $active-bg: if(map-get($map, "active-bg"), map-get($map, "active-bg"), darken($base, 5%));
    $active-color: if(map-get($map, "active-color"), map-get($map, "active-color"), setTextColor($active-bg));

    .#{$identifier} {
        @include basicColorScheme($base, $border-color, $color);

        //     // if there is no link color then force the default??? extra for no reason???
        //     // only create theme link styles if $link-color exists in map, else fall back to default
        //     @if (map-get($map, "link-color") or map-get($map, "default-links")) {
        //         // $link-color: map-get($map, "link-color");
        //         $link-color: if(map-get($map, "link-color"), map-get($map, "link-color"), $link-color);
        //         $link-hover-color: if(map-get($map, "link-hover-color"), map-get($map, "link-hover-color"), $link-hover-color);

        //         a:not(a.btn){
        //             color: $link-color;
        //             &.hover,
        //             &:hover {
        //                 color: $link-hover-color;
        //             }
        //         }
        //     }

        //     // if there is a title colour, then use it
        //     @if (map-get($map, "title-color")){
        //         .bx-title{
        //             color: map-get($map, "title-color");
        //         }
        //     }

        &.withState {
            @extend %transition;
            &:hover {
                background-color: $hover-bg;
                color: $hover-color;
            }
            &:active {
                background-color: $active-bg;
                color: $active-color;
            }
        }

        // do not apply to :hover let component or specialty classes look after it
        &.outline:not(:hover) {
            background-color: transparent;
            border-color: $base;
            color: $base;
        }
    }
}
