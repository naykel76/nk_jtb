@use "../variables/utility_maps" as *;
@use "../mixins/media" as *;
@use "sass:list";
@use 'sass:map';

@function derivedClass($list) {
    $numBreakPoints: list.length($list);

    $baseValue: list.nth($list, -1);
    $smValue: list.nth($list, -2);
    $mdValue: if($numBreakPoints >= 3, list.nth($list, -3), null);
    $lgValue: if($numBreakPoints >= 4, list.nth($list, -4), null);
    $xlValue: if($numBreakPoints >= 5, list.nth($list, -5), null);
    $xxlValue: if($numBreakPoints >= 6, list.nth($list, -6), null);

    @if ($numBreakPoints == 2) {
        @return #{$smValue}-#{$baseValue};
    } @else if ($numBreakPoints == 3) {
        @return #{$mdValue}-#{$smValue}-#{$baseValue};
    } @else if ($numBreakPoints == 4) {
        @return #{$lgValue}-#{$mdValue}-#{$smValue}-#{$baseValue};
    } @else if ($numBreakPoints == 5) {
        @return #{$xlValue}-#{$lgValue}-#{$mdValue}-#{$smValue}-#{$baseValue};
    } @else if ($numBreakPoints == 6) {
        @return #{$xxlValue}-#{$xlValue}-#{$lgValue}-#{$mdValue}-#{$smValue}-#{$baseValue};
    }
}

@mixin magicGridEqualWidths($listsOfValues) {
    $identifier: cols;
    @each $list in $listsOfValues {
        // exclude empty list when creating single list
        @if ($list != ()) {
            $numBreakPoints: list.length($list);

            // set the value of the BP based on position using negative
            // numbers. This makes sure the position is always the same
            $baseValue: list.nth($list, -1);
            $smValue: list.nth($list, -2);
            $mdValue: if($numBreakPoints >= 3, list.nth($list, -3), null);
            $lgValue: if($numBreakPoints >= 4, list.nth($list, -4), null);
            $xlValue: if($numBreakPoints >= 5, list.nth($list, -5), null);
            $xxlValue: if($numBreakPoints >= 6, list.nth($list, -6), null);

            $derived-class: derivedClass($list);

            // You want ALL classes to have the opportunity to build
            // so DO NOT use else-if statements
            .#{$identifier}-#{$derived-class} {
                grid-template-columns: repeat(list.nth($list, -1), 1fr);

                @include from-sm {
                    // grid-template-columns: list.nth(map.get($fr-conversion-map, $smValue), 1) list.nth(map.get($fr-conversion-map, $smValue), 2);
                    grid-template-columns: repeat(list.nth($list, -2), 1fr);
                }

                @if ($numBreakPoints >= 3) {
                    @include from-md {
                        grid-template-columns: repeat(list.nth($list, -3), 1fr);
                    }
                }

                @if ($numBreakPoints >= 4) {
                    @include from-lg {
                        grid-template-columns: repeat(list.nth($list, -4), 1fr);
                    }
                }

                @if ($numBreakPoints >= 5) {
                    @include from-xl {
                        grid-template-columns: repeat(list.nth($list, -5), 1fr);
                    }
                }

                @if ($numBreakPoints >= 6) {
                    @include from-xxl {
                        grid-template-columns: repeat(list.nth($list, -6), 1fr);
                    }
                }
            }
        }
    }
}
