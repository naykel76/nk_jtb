@use "../functions/helpers" as *;
@use "./makePropertyMixins" as *;
@use "./makeResponsiveClassMixins" as *;
@use "./media" as *;


// @mixin createMultiplePropertyClass($class, $props) {
//     .#{$class} {
//         @include create-properties($props);
//     }
// }

// NK?? This could arguably be moved into the main generator mixin
// $positions is each individual position, e.g., top, bottom, left, right

// 1. initialise props to be used for responsive classes
// 2. pass in identifier to strip-invalid to remove unwanted characters
// 3. merge the props for each position into a single map so it can
//    be used for responsive classes which expects a map of props
//    not a seperate `property` and `value

@mixin positionBasedClass($property, $value, $positions-map, $identifier, $variant, $breakpoints) {
    @each $axis-or-position-key, $positions in $positions-map {
        $props: (); // 1.
        $derived-class: strip-invalid(#{$identifier}#{$axis-or-position-key}-#{$variant}, $identifier); // 2.

        .#{$derived-class} {
            @each $position in $positions {
                #{$property}-#{$position}: #{$value};
                $props: map-merge($props, (#{$property}-#{$position}: $value)); // 3.
            }
        }
        @if ($breakpoints) {
            // convert the `breakpoints` passed in as a list to an
            // argument list because the makeFromBreakpoint mixin
            // expects separate arguments.
            @include makeFromBreakpoint($props, $derived-class, $breakpoints);
        }
    }
}

// ==========================================================================
// -- CREATE ONE OR MANY PROPERTIES FROM MAP OF KEY-VALUE PAIRS --
// ==========================================================================

// must pass in complete value including the unit
@mixin createSingleProperty($property, $value) {
    #{$property}: $value;
}

// ==========================================================================
// Generate properties based on positional requirements. For
// example, when `margin-top` requires a value for `top`, and
// `margin-x` requires values for `left` and `right`.
// ==========================================================================
// This mixin iterates through a list of positions, creating the
// appropriate property (e.g., `top`, `bottom`, `left`, `right`)
// based on the provided value.
//
// You can specify the unit of measurement with the optional `$unit`
// parameter, with the default unit being "rem".

@mixin createPositionProperties($property, $value, $positions, $unit: "rem") {
    @each $position in $positions {
        $derivedUnit: if(($value == "auto" or $value == 0), null, $unit);
        #{$property}-#{$position}: #{$value}#{$derivedUnit};
    }
}
