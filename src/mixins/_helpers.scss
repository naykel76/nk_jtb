@use 'sass:map';

// ==========================================================================
// get-breakpoints()
// --------------------------------------------------------------------------
// Ensures a valid list of breakpoints is returned. Allows properties to define
// custom breakpoint sets, or fall back to a default set when none are provided.
// --------------------------------------------------------------------------
// Example:
//  - get-breakpoints(null) => ('sm', 'md', 'lg', 'xl')
//  - get-breakpoints(('xs', 'md')) => ('xs', 'md')
// ==========================================================================
@function get-breakpoints($breakpoints) {
    $default-breakpoints: ('sm', 'md', 'lg', 'xl');

    @return if($breakpoints == null, $default-breakpoints, $breakpoints);
}

// ==========================================================================
// get-states()
// --------------------------------------------------------------------------
// Ensures a valid list of states is returned. Allows properties to define
// custom state sets, or fall back to a default set when none are provided.
// --------------------------------------------------------------------------
// Example:
//  - get-states(null) => ('hover', 'focus', 'active')
//  - get-states(('hover', 'disabled')) => ('hover', 'disabled')
// ==========================================================================
@function get-states($states) {
    $default-states: ('hover', 'focus', 'active');

    @return if($states == null, $default-states, $states);
}

// ==========================================================================
// resolve-breakpoints()
// --------------------------------------------------------------------------
// Conditionally resolves breakpoints based on responsive mode. When responsive
// is enabled, ensures a valid breakpoint list. When disabled, preserves the
// original map value (which may be null).
// --------------------------------------------------------------------------
// Example:
//  - resolve-breakpoints(true, null) => ('sm', 'md', 'lg', 'xl')
//  - resolve-breakpoints(false, ('lg')) => ('lg')
//  - resolve-breakpoints(false, null) => null
// ==========================================================================
@function resolve-breakpoints($responsive, $breakpoints) {
    @return if($responsive, get-breakpoints($breakpoints), $breakpoints);
}

// ==========================================================================
// resolve-states()
// --------------------------------------------------------------------------
// Conditionally resolves state variants based on state mode. When states are
// enabled, ensures a valid state list. When disabled, preserves the original
// map value (which may be null).
// --------------------------------------------------------------------------
// Example:
//  - resolve-states(true, null) => ('hover', 'focus', 'active')
//  - resolve-states(false, ('hover')) => ('hover')
//  - resolve-states(false, null) => null
// ==========================================================================
@function resolve-states($with-state, $map-states) {
    @return if($with-state, get-states($map-states), $map-states);
}

// ==========================================================================
// resolve-prefix()
// --------------------------------------------------------------------------
// Determines the appropriate CSS class prefix based on map configuration.
// Handles three scenarios: no prefix, custom prefix, or default prefix
// derived from the property name.
// --------------------------------------------------------------------------
// Example:
//  - resolve-prefix(false, 'margin') => ''
//  - resolve-prefix('custom-', 'margin') => 'custom-'
//  - resolve-prefix(null, 'margin') => 'margin-'
// ==========================================================================
@function resolve-prefix($prefix, $property) {
    @return if($prefix == false, '', if($prefix == null, $property + '-', $prefix));
}
