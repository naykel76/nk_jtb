@use '../functions/strings' as *;
@use 'sass:list';
@use 'sass:meta';
@use 'sass:string';

// ==========================================================================
// TRANSITION MIXIN
// ==========================================================================
// Creates smooth transitions with intelligent defaults based on property type.
//
// USAGE:
//   @include transition();                                    // all properties, 300ms
//   @include transition(color);                               // auto: 150ms (fast)
//   @include transition(opacity);                             // auto: 250ms (smooth)
//   @include transition((background-color, color));           // auto: 150ms for both
//   @include transition(transform, 200ms);                    // override with custom
//   @include transition(width, 350ms, ease-in-out, 100ms);    // full control
//
// AUTO DURATIONS BY PROPERTY:
//   - color, background*:     150ms  (fast feedback)
//   - border*, box-shadow:    200ms  (subtle effects)
//   - opacity, visibility:    250ms  (smooth fades)
//   - transform:              200ms  (balanced movement)
//   - width, height, max-*:   300ms  (layout changes)
//   - all, other:             300ms  (safe default)
//
// NOTES:
//   - Wrap multiple properties in parentheses: (prop1, prop2)
//   - Auto durations apply only when duration is not specified
//   - Avoid 'all' in production - specify exact properties for performance
// ==========================================================================

@mixin transition($properties: all, $duration: null, $timing: cubic-bezier(0.4, 0, 0.2, 1), $delay: 0s) {
    @if meta.type-of($properties) == 'list' and list.length($properties) > 1 {
        $transitions: ();

        @each $prop in $properties {
            $prop-duration: if($duration, $duration, get-transition-duration($prop));
            $transitions: list.append($transitions, #{$prop} $prop-duration $timing $delay, $separator: comma);
        }

        transition: $transitions;
    } @else {
        $final-duration: if($duration, $duration, get-transition-duration($properties));

        transition: $properties $final-duration $timing $delay;
    }
}

// ==========================================================================
// Get smart default duration based on property type.
// ==========================================================================
@function get-transition-duration($property) {
    $prop-str: string.to-lower-case(#{$property});

    // Fast: colors and text (150ms)
    $fast-props: ('color', 'fill', 'stroke');
    $fast-patterns: ('background', 'text');

    // Medium-fast: borders and shadows (200ms)
    $medium-fast-props: ('box-shadow', 'transform');
    $medium-fast-patterns: ('border', 'outline', 'translate', 'rotate', 'scale');

    // Medium-slow: opacity (250ms)
    $medium-slow-props: ('opacity', 'visibility');

    // Slower: layout (300ms)
    $slow-props: ('width', 'height', 'flex', 'flex-basis');
    $slow-patterns: ('max-', 'min-');

    // Check exact matches and patterns
    @if list.index($fast-props, $prop-str) or contains-any($prop-str, $fast-patterns) {
        @return 150ms;
    }

    @if list.index($medium-fast-props, $prop-str) or contains-any($prop-str, $medium-fast-patterns) {
        @return 200ms;
    }

    @if list.index($medium-slow-props, $prop-str) {
        @return 250ms;
    }

    @if list.index($slow-props, $prop-str) or contains-any($prop-str, $slow-patterns) {
        @return 300ms;
    }

    @return 300ms; // Default
}


