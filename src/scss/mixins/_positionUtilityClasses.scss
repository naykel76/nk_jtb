@use "../functions/helpers" as *;
@use "../../mixins/helpers" as *;

// --------------------------------------------------------------
// -- CREATES BASE AND POSITION BASED UTILITY CLASSES --
// --------------------------------------------------------------
//
//

// add a dash between class and position (bdr-xy)
@function setPositionKeySeparator($class, $axis-or-position, $exclusions: ("m", "p")) {
    // if class is in exclusions
    @each $class in $exclusions {
        @if ($class == $class) {
            // return without a dash
            @return #{$axis-or-position};
        }
    }
    @return -#{$axis-or-position};
}

@mixin positionUtilityClasses($utility-map) {
    @each $property, $map in $utility-map {
        $class: map-get($map, "base-class");
        $value: map-get($map, "value");
        $values-map: map-get($map, "values-map");

        // each $direction (x, y ...) in map, has positions-list (top, bottom ...)
        @each $axis-or-position, $positions in map-get($map, "axis-position-map") {
            // 1: 1rem or default: 1px solid red
            @each $key, $value in $values-map {
                // escape decimal /0.5 and remove (size) key for default size
                $size-key: escapeDecimal(if($key == "default", "", -#{$key}));

                // add or remove dash separator between class and position (bdr-x or mx)
                // exclusions can be added in the setPositionKeySeparator() function
                $position-key: setPositionKeySeparator($class, $axis-or-position);

                // remove optional xy suffix as position key (bdr or bdr-xy)
                @if ($axis-or-position == "xy") {
                    $position-key: if(map-has-key($map, "xy-suffix"), "xy", "");
                }

                .#{$class}#{$position-key}#{$size-key} {
                    @include makePositionProperties($property, $positions, #{$value});
                }
            }
        }
    }
}
