@use "../../base/vars_base" as *;
@use "../../functions/helpers" as *;
@use "../../mixins/media" as *;
@use "../mixins/makeMagicClass" as *;
@use "sass:map";

// ------------------------------------------------------------------
// -- WIDTH AND HEIGHT UTILITY CLASSES --
// ------------------------------------------------------------------

$size-utilities: (
    "width": (
        "prefix": "w-",
        "values": (
            auto: auto,
            fc: fit-content,
            full: 100%,
            screen: 100vw,
            // min: min-content,
            // max: max-content,
            // fit: fit-content,
        ),
    ),
    "height": (
        "prefix": "h-",
        "values": (
            auto: auto,
            fc: fit-content,
            full: 100%,
            screen: 100vh,
        ),
    ),
);

@each $property, $map in $size-utilities {
    $prefix: map-get($map, "prefix");
    $values: map-get($map, "values");

    @each $key, $v in $values {
        .#{$prefix}#{$key} {
            #{$property}: $v;
        }
    }
}

$max-min-sizes: (
    200: 200px,
    250: 250px,
    300: 300px,
    400: 400px,
    600: 600px,
    800: 800px,
    "sm": $sm,
    "md": $md,
    "lg": $lg,
);

@each $key, $value in $max-min-sizes {
    .minw-#{$key} {
        // this seems very redundant!!
        // width: Max($value, 1%); // 1.
        min-width: $value; // 1.
    }
    // max-width, up to max of n%
    .maxw-#{$key} {
        // Think of the min() value as providing the maximum value a property
        // can have. chooses the minimum of the two
        max-width: $value;
        // width: Min($value, 95%); // 1. use capital so sass does not throw an error
    }
}
