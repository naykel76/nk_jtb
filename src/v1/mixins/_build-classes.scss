@use '../../functions/helpers/' as *;
@use '../../v1/mixins/class-makers' as *;
@use '../../v1/mixins/property-makers' as *;
// @use './make-position-based-class' as *;
@use 'sass:list';
@use 'sass:map';
@use 'sass:string';

// allows you to override the default breakpoints in the map for cases where you
// you do not want the full range of breakpoints.
@function get-breakpoints($breakpoints) {
    $default-breakpoints: ('sm', 'md', 'lg', 'xl');
    @return if($breakpoints == null, $default-breakpoints, $breakpoints);
}

@mixin build-custom-classes($properties-map, $responsive: false) {
    @each $class, $map in $properties-map {
        $props: map.get($map, 'props');
        $map-breakpoints: map.get($map, "breakpoints"); // optional
        // if responsive is true, get the breakpoints from the map or use the default
        $breakpoints: if($responsive, get-breakpoints($map-breakpoints), $map-breakpoints );

        .#{$class} {
            @include make-properties($props);
        }

        @if ($breakpoints) {
            @include make-from-breakpoint($props, $class, $breakpoints);
        }
    }
}



// 1. The `key`can be a single value e.g. `1.5` or a key-value pair represented
//    as list e.g. `sm 1.5`. This allows you to pass in a list of values or a
//    map of key-value pairs.
// 2. $derived-unit: Checks if the $value includes a unit (12px, 1em, 100vh,
//    etc.). If it does, $derived-unit is set to null. If it doesn't,
//    $derived-unit is set to $unit.This is used to prevent the unit from being
//    added twice when values include units.
// 3. $derived-value: This variable holds the processed value of the class,
//    which is derived from the original $value. It's created to ensure that the
//    class value is handled correctly based on its unit.
// 4. $derived-variant: This variable combines the variant and the unit into a
//    single string. This creates the unique identifier which is used to create
//    the class name.

// Generates utility classes based on the provided $properties-map.
//
// Responsive logic:
// - If $responsive is true, breakpoints will be derived from the map entry
//   (`breakpoints`) or fall back to default ('sm', 'md', 'lg', 'xl').
// - If $responsive is false, only breakpoints explicitly defined in the map will be used.
// - If no breakpoints are found and $responsive is false, only base classes will be created.
//
// This allows flexible per-property control while enabling global responsive toggling.

// prettier-ignore
@mixin build-utilities($properties-map, $responsive: false) {

    @each $property, $map in $properties-map {

        // seperate the map into its parts for easier access
        $values: map.get($map, "values");
        $identifier: map.get($map, "prefix");
        $unit: map.get($map, "unit"); // optional
        $positions-map: map.get($map, "positions"); // optional
        $map-breakpoints: map.get($map, "breakpoints"); // optional

        // if responsive is true, get the breakpoints from the map or use the default
        $breakpoints: if($responsive, get-breakpoints($map-breakpoints), $map-breakpoints );

        @each $key, $value in $values { // 1.

            // Process the key and value to get the variant and value
            $variant-value: get-variant-value($key, $value);
            $variant: list.nth($variant-value, 1);
            $value: list.nth($variant-value, 2);

            // Derived variables simplify and standardize value and unit
            // handling in utility class generation, improving code readability
            // and reducing complexity.
            $derived-unit: if(value-has-unit($value), null, ($unit)); // 2.
            $derived-value: #{handle-class-value($value, $derived-unit)}; // 3.
            $derived-variant: #{$variant}#{handle-class-unit($derived-unit)}; // 4.

            @if $positions-map {
                @include make-position-based-class($property, $derived-value, $positions-map, $identifier, $derived-variant, $breakpoints);
            } @else{
                $derived-class: strip-invalid(#{$identifier}#{$derived-variant});
                @include make-single-property-class(#{$derived-class}, $property, #{$derived-value}, $breakpoints);
            }
        }
    }
}
