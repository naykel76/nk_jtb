@use "../config" as *;
@use "../functions/get" as *;
@use "../mixins/common" as *;
@use "../mixins/generate-magic-classes" as *;
@use "../mixins/magicGridGenerators" as *;
@use "../mixins/makeResponsiveClassMixins" as *;

$gap: get("grid.default-gap", $config);
$gap-sizes: (0, 0.25, 0.5, 1, 1.25, 1.5, 2, 3, 4, 5) !default;
$num-grid-cols: get("grid.num-grid-cols", $config);

// ==========================================================================
// -- GRID --
// ==========================================================================
// NK::TD refactor into a more reusable mixin
// Must sit above utility classes

@each $size in $gap-sizes {
    $class: escapeDecimal($size);
    .grid-#{$class} {
        display: grid;
        gap: #{$size}rem;
    }
}
.grid {
    display: grid;
    gap: $gap;
}

.gap {
    gap: $gap;
}

// ==========================================================================
// -- GENERAL --
// ==========================================================================

// prettier-ignore
$grid-properties-map: (
    gap: (
        prefix: "gap-",
        values: $gap-sizes,
        unit: "rem"
    ),
    justify-items: (
        prefix: "justify-items-",
        values: ( center, end, start, stretch ) ),
    justify-self: (
        prefix: "justify-self-",
        values: ( auto, center, end, start, stretch )
    ),
    place-content: (
        prefix: "place-content-",
        values: ( baseline, center, end, space-around, space-between, space-evenly, start, stretch )
    ),
    place-items: (
        prefix: "place-items-",
        values: ( baseline, center, end, start, stretch )
    ),
    place-self: (
        prefix: "place-self-",
        values: ( auto, center, end, start, stretch )
    )
);

@include generate-utilities($grid-properties-map);

// ==========================================================================
// -- GRID SPANNING --
// ==========================================================================
// 1 is redundant, but it's there because I am lazy!
@for $i from 1 through $num-grid-cols {
    .col-span-#{$i} {
        grid-column: span $i;
    }
}

// ==========================================================================
// -- EQUAL WIDTHS COLUMNS(RESPONSIVE AND NON-RESPONSIVE) --
// ==========================================================================
@for $i from 1 through $num-grid-cols {
    // base class
    .cols-#{$i} {
        grid-template-columns: repeat($i, minmax(0, 1fr));
    }
    // responsive classes
    $props: (
        grid-template-columns: repeat($i, minmax(0, 1fr))
    );
    $breakpoints: ("base", "sm", "md", "lg", "xl");
    $class: "cols-#{$i}";
    @include makeFromBreakpoint($props, $class, $breakpoints);
}

// ==========================================================================
// -- MAGIC CLASSES --
// ==========================================================================
// THIS IS EXPERIMENTAL AND MAY NAT STAY IN THE CODEBASE

// ---------------- BEFORE YOU DO ANYTHING CRAZY ------------------
// ALL MAGIC MIXINS MUST HAVE AT LEAST TWO MAPS OR YOU WILL GET AN
// AN 'UNDEFINED' ERROR BECAUSE IT TREATS A SINGLE MAP AS A LIST
// ---------------- BEFORE YOU DO ANYTHING CRAZY ------------------

$grid-gap-magic-sizes: ((5, 3, 2), (5, 3), (4, 2), (3, 1)) !default;
@include generate-magic-classes(grid-gap, ($grid-gap-magic-sizes), "gap");

$equal-width-magic-columns: ((4, 2, 1), (4, 3, 2, 1), (3, 2, 1), (3, 1, 1)) !default;
@include magicGridEqualWidths($equal-width-magic-columns);
