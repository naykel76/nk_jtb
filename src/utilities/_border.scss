@use '../mixins/common' as *;
@use '../v1/maps_and_variables/base' as *;
@use 'sass:map';

// remove the following colours from the map
$border-radius-merged: magic-merge($border-radius-variants, $border-radius-sizes);

// this is not easy to override on the child element unless the
// properties are set as !important but works great otherwise.
.divide-y > :not([hidden]) ~ :not([hidden]) {
    border-top: 1px solid $border-color;
}

// prettier-ignore
$border-properties-map: (
    border: (
        prefix: #{$border-identifier},
        values: (
            default: $border,
            none: none,
        ),
        positions: $axis-position-map,
    ),
    border-width: (
        prefix: #{$border-identifier},
        // use key-value pair instead of values to make it easier
        // manage unit and class name
        values: (0: 0, 1: 1px, 2: 2px, 3: 3px, 4: 4px, 5: 5px),
    ),
    border-style: (
            prefix: #{$border-identifier},
            values: (solid, dashed, dotted, double, none),
        ),
    border-radius: (
        prefix: "rounded-",
        values: $border-radius-merged,
        unit: "rem"
    ),
);

@include generate-utilities($border-properties-map);

// ----------------------------------------------------------------
// This map and the following mixin is used to generate
// `border-radius` classes for corners. It has been separated
// because it is a little different. The full border-radius is
// handled in the `$border-properties-map` above.
// ----------------------------------------------------------------

$border-radius-corners-map: (
    prefix: 'rounded-',
    values: $border-radius-sizes,
    unit: 'rem',
    positions: $corners-map
);

@mixin borderRadius($map) {
    @each $value in map.get($map, 'values') {
        $identifier: 'rounded-';
        $sanitized: handle-invalid($value);
        @each $position-key, $positions in map.get($map, 'positions') {
            $class: #{$identifier}#{$position-key}-#{$sanitized};
            .#{$class} {
                @each $position in $positions {
                    // prettier-ignore
                    $derived-unit: if(($value == "auto" or $value == 0), null, map.get($map, "unit"));
                    border-#{$position}-radius: #{$value}#{$derived-unit};
                }
            }
        }
    }
}

@include borderRadius($border-radius-corners-map);
