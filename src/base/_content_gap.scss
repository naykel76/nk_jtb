@use '../maps_and_variables/base' as *;

// section, article, aside, header, footer, nav, main are not included because
// they are typically used as layout elements and should not have content gap
// applied to them. div is also excluded to prevent unintended spacing issues.

// inline elements such as span, a, strong, em, etc. are not included because
// they should not have margin applied to them. Similarly, svg is excluded to
// prevent unintended spacing issues.

// don't be tempted to add div here, it creates more problems than it solves
$spacing-targets: blockquote, p, pre, form, table, ol, ul, h1, h2, h3, h4, h5, h6;
$common-classes: "[class*='container']", '.frm-row', '.grid', "[class*='flex']:not(.inline-flex)";
$bx: '.bx', '.bx-content', '.bx-title';

// Excluded inline elements (expand as issues are discovered):
// - svg: causes spacing issues when used as icons adjacent to text
// - span: inline element, should not receive block-level spacing
$inline-exclusions: svg, span;

// Content gap - only apply to block-level elements
:where(#{$spacing-targets}, #{$common-classes}, #{$bx}) + :where(*:not(#{$inline-exclusions})) {
    margin-block-start: $base-gap;
}

// This is experimental and may be more hassle than it's worth. It is to cover
// the case when there are hidden inputs in the form.
:where(input) + :where(div:not(.slider), p) {
    margin-block-start: $base-gap;
}

// catch the strays (use with caution). The :where selector is to kill the
// specificity for easier override
:where(*:not([class*='flex'], [class*='grid'])) > :where(.frm-row, table, form, pre):not(:first-child) {
    margin-block-start: $base-gap;
}

// opt out for `flex` and `grid` element and use `gap` instead.
:where([class*='flex'], [class*='grid']) > * {
    margin: 0;
}

// adjust margin for the `ul` when the `li` has `flex` class. This is needed
// because flex automatically removes the bullets leaving the margin
ul:has(.flex) {
    margin-inline: 0;
}
