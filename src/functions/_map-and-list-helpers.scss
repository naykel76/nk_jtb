@use './strings' as *;
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';

// ============================================================================
// LIST UTILITIES
// ============================================================================

// Converts a list of values into a map where each value is used as both
// key and value. Useful for generating utility maps from shorthand lists.
//
// Example: list-to-map((green, 5, 16px)) → (green: green, 5: 5, 16px: 16px)
// Note: Values must be wrapped in parentheses to be treated as a single list.
// --------------------------------------------------------------------------
@function list-to-map($list) {
    $map: ();

    @each $value in $list {
        $map: map.merge(
            $map,
            (
                $value: $value
            )
        );
    }

    @return $map;
}

// Remove an item from a Sass list while preserving order.
// Does not modify the original list.
//
// Example: remove-from-list((sm, md, lg, xl), lg) → (sm, md, xl)
// --------------------------------------------------------------------------
@function remove-from-list($list, $value) {
    $result: ();

    @each $item in $list {
        @if $item != $value {
            $result: list.append($result, $item);
        }
    }

    @return $result;
}

// ============================================================================
// MAP MERGING UTILITIES
// ============================================================================

// Merge two or more maps into a single map.
//
// Example: merge-maps($colors, $spacing, $typography)
// --------------------------------------------------------------------------
@function merge-maps($maps...) {
    $merged-map: ();

    @each $map in $maps {
        $merged-map: map.merge($merged-map, $map);
    }

    @return $merged-map;
}

// Merge any combination of maps and lists into a single map.
// Lists are automatically converted to maps using list-to-map.
//
// Example: smart-merge((a: 1), (b, c), (d: 2)) → (a: 1, b: b, c: c, d: 2)
// Note: All arguments must be passed directly — do not pass a list of maps.
// --------------------------------------------------------------------------
@function smart-merge($collections...) {
    $map: ();

    @each $collection in $collections {
        @if meta.type-of($collection) == 'list' {
            $collection: list-to-map($collection);
        }

        $map: map.merge($map, $collection);
    }

    @return $map;
}

// ============================================================================
// NESTED MAP UTILITIES
// ============================================================================

// Flatten a nested map into a single-level map with concatenated keys.
//
// Example:
//   $nested: (primary: (light: #f0f, dark: #900))
//   flatten-map($nested) → (primary-light: #f0f, primary-dark: #900)
// --------------------------------------------------------------------------
@function flatten-map($map, $prefix: '') {
    $result: ();

    @each $key, $value in $map {
        $new-key: if($prefix == '', $key, '#{$prefix}-#{$key}');

        @if meta.type-of($value) == 'map' {
            $nested: flatten-map($value, $new-key);
            $result: map.merge($result, $nested);
        } @else {
            $result: map.merge(
                $result,
                (
                    $new-key: $value
                )
            );
        }
    }

    @return $result;
}

// Check if nested map has a value by the given keys.
//
// Example: map-deep-check($config, 'colors', 'primary', 'light')
// --------------------------------------------------------------------------
@function map-deep-check($map, $keys...) {
    @if meta.type-of($map) != 'map' {
        @error 'Expected map, got #{meta.type-of($map)}: #{$map}';
    }

    @each $key in $keys {
        @if not map.has-key($map, $key) {
            @return false;
        }
        $map: map.get($map, $key);
    }

    @return true;
}

// Get a value from nested map by the given keys.
//
// Example: map-deep-get($config, 'spacing', 'xs', 'y')
// --------------------------------------------------------------------------
@function map-deep-get($map, $keys...) {
    @if meta.type-of($map) != 'map' {
        @error 'Expected map, got #{meta.type-of($map)}: #{$map}';
    }

    @each $key in $keys {
        $map: map.get($map, $key);
    }

    @return $map;
}

// Get value from nested map using dot notation string.
// Requires the strings utility for str-explode function.
//
// Example: map-get-dot('border.radius.xs', $config)
// --------------------------------------------------------------------------
@function map-get-dot($key, $map) {
    $keys: str-explode($key, '.');

    @if not map-deep-check($map, $keys...) {
        @error 'Path "#{$key}" not found in map';
    }

    @return map-deep-get($map, $keys...);
}
