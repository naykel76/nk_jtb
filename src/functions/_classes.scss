@use './strings' as *;
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';

// ==========================================================================
// Sanitize and escape class names for safe use in CSS.
// ==========================================================================
// Converts the input to a string and formats it for safe use in CSS class names.
//
// - Removes the decimal point if the value starts with '0.' (e.g., '0.5' → '05').
// - Escapes decimal points to avoid invalid class names (e.g., '20.5' → '20\.5').
// - Removes 'rem' units if present.
//
// Example:
//      .my-class-#{sanitize-class-name(20.5rem)} { ... }
//      Outputs: .my-class-20\.5 { ... }
// ==========================================================================
@function sanitize-class-name($input) {
    $input: to-string($input);

    // Remove decimal point if value starts with '0.'
    @if string.slice($input, 1, 2) == '0.' {
        $input: str-replace($input, '0.', '0');
    }

    $output: escape-decimal($input);
    $output: strip-rem($output);

    @return $output;
}

// ==========================================================================
// Strip invalid or unnecessary suffixes from class names.
// ==========================================================================
// Cleans up class names by removing specific suffixes used for logic,
// but unnecessary or undesired in the final class output.
//
// - Removes '-base' suffix (e.g., 'pxy-base' → 'pxy').
// - Removes '-default' suffix (e.g., 'bdr-default' → 'bdr').
// - Removes '-xy' suffix from known exclusions (e.g., 'bdr-xy' → 'bdr').
//
// This function supports dynamic class generation by stripping context-specific
// markers used internally.
//
// Example:
//     strip-invalid('bdr-xy-sm', 'bdr-') → 'bdr-sm'
//     strip-invalid('pxy-base') → 'pxy'
// ==========================================================================

$xy-exclusions: ('bdr-');

@function strip-class-suffixes($class, $identifier: '') {
    @if string.slice($class, -5) == '-base' {
        $class: string.slice($class, 1, -6);
    }

    @if string.slice($class, -8) == '-default' {
        $class: string.slice($class, 1, -9);
    }

    @if list.index($xy-exclusions, $identifier) and (string.slice($class, -3) == '-xy') {
        $class: string.slice($class, 1, -4);
    }

    @return $class;
}


// ==========================================================================
// Exclude units from being appended to class names.
// ==========================================================================
// Defines values that should not receive a unit suffix in class names.
// Example: 0, %, and auto remain unchanged.
// ==========================================================================

$exclude-units: ('auto', '%', 0, 'fit-content', 'max-content', 'min-content');

@function handle-class-value($value, $unit) {
    $derived-unit: if(list.index($exclude-units, $value), null, $unit);

    @return $value + $derived-unit;
}

// ==========================================================================
// Remove default 'rem' unit from class names.
// ==========================================================================
// Removes 'rem' from unit string if present, as it's treated as default.
// ==========================================================================

@function handle-class-unit($unit) {
    @return if($unit != 'rem', $unit, '');
}



// ==========================================================================
// Normalise key and value into a variant and CSS value pair for class generation.
// ==========================================================================
// - Sanitises the key for safe use in class names.
// - If value is missing, falls back to using the key as the value.
// - Supports keys as strings, numbers, or lists [variant, value].
//
// Examples:
//  - (1)         → ('1', 1)
//  - ('sm', 1)   → ('sm', 1)
// ==========================================================================

@function normalise-variant-value($key, $value) {
    $variant: sanitize-class-name($key);
    $value: if($value, $value, $key);

    @if meta.type-of($key) == list {
        $variant: list.nth($key, 1);
        $value: list.nth($key, 2);
    }

    @return ($variant, $value);
}

// ==========================================================================
// Check if an axis key should be omitted from the class name.
// ==========================================================================
// Determines whether a position key (e.g., 'x', 'y', 'xy') should be excluded
// from the generated class name based on the omit-axis-keys configuration.
//
// @param {String} $position-key - The axis/position key to check
// @param {List} $omit-axis-keys - List of keys to omit (can be null/false)
// @return {Boolean} - True if the key should be omitted, false otherwise
//
// Examples:
//   should-omit-axis-key('xy', ('xy')) → true
//   should-omit-axis-key('x', ('xy'))  → false
//   should-omit-axis-key('x', null)    → false
// ==========================================================================
@function should-omit-axis-key($position-key, $omit-axis-keys) {
    @if not $omit-axis-keys {
        @return false;
    }

    @each $omit-key in $omit-axis-keys {
        @if $position-key == $omit-key {
            @return true;
        }
    }

    @return false;
}

// ==========================================================================
// Build a position-based class name with optional axis key omission.
// ==========================================================================
// Generates the final class name for position-based utilities by combining
// the identifier, position key, and variant, then stripping unwanted suffixes.
//
// @param {String} $identifier - Base class prefix (e.g., 'm-', 'p-')
// @param {String} $variant - Variant suffix (e.g., '1', '2')
// @param {String} $position-key - Position/axis key (e.g., 'x', 'y', 'xy')
// @param {List} $omit-axis-keys - Keys to omit from class name
// @return {String} - The final class name
//
// Examples:
//   build-position-class-name('m-', '1', 'x', null) → 'm-x-1'
//   build-position-class-name('m-', '1', 'xy', ('xy')) → 'm-1'
//   build-position-class-name('p-', '2', 'y', null) → 'p-y-2'
// ==========================================================================
@function build-position-class-name($identifier, $variant, $position-key, $omit-axis-keys) {
    @if should-omit-axis-key($position-key, $omit-axis-keys) {
        @return strip-class-suffixes(#{$identifier}#{$variant}, $identifier);
    } @else {
        @return strip-class-suffixes(#{$identifier}#{$position-key}-#{$variant}, $identifier);
    }
}

// ==========================================================================
// Build a map of CSS properties from positions for a given base property.
// ==========================================================================
// Creates a map of CSS property-value pairs by applying a value to each
// position in the positions list. Handles special properties that require
// split patterns (like border-width).
//
// @param {String} $property - Base CSS property name (e.g., 'margin', 'border-width')
// @param {List} $positions - List of positions (e.g., (top, bottom))
// @param {String} $value - The CSS value to apply
// @param {Function} $get-property-fn - Function to resolve position-specific property names
// @return {Map} - Map of CSS properties and values
//
// Examples:
//   build-property-map('margin', (top, bottom), '1rem') 
//     → (margin-block-start: 1rem, margin-block-end: 1rem)
//   build-property-map('padding', (inline-start), '2rem')
//     → (padding-inline-start: 2rem)
// ==========================================================================
@function build-property-map($property, $positions, $value, $get-property-fn) {
    $props: ();

    @each $position in $positions {
        $css-property: meta.call($get-property-fn, $property, $position);
        $props: map.merge($props, (#{$css-property}: $value));
    }

    @return $props;
}

// ==========================================================================
// Build a CSS selector with optional child combinator support.
// ==========================================================================
// Creates a selector string that can be either a standard class selector
// or a child combinator selector (for utilities like space-x/space-y).
//
// @param {String} $class-name - The base class name (without dot)
// @param {String|Boolean} $child-combinator - Child combinator pattern or false
//   - false/null: generates standard selector `.class-name`
//   - String: generates `:where(.class-name {combinator})`
//   - Default combinator: '> *:not(:first-child)'
// @return {String} - The complete selector
//
// Examples:
//   build-selector('m-x-1', false) 
//     → '.m-x-1'
//   build-selector('space-x-1', '> *:not(:first-child)') 
//     → ':where(.space-x-1 > *:not(:first-child))'
//   build-selector('space-y-2', true)
//     → ':where(.space-y-2 > *:not(:first-child))'
// ==========================================================================
@function build-selector($class-name, $child-combinator: false) {
    @if not $child-combinator {
        @return '.#{$class-name}';
    }
    
    // If true, use default combinator
    $combinator: if($child-combinator == true, '> *:not(:first-child)', $child-combinator);
    
    @return ':where(.#{$class-name} #{$combinator})';
}
