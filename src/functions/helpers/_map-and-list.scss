@use "sass:map";
@use "sass:meta";

// ==========================================================================
// Convert a list of values to a map of key-value pairs where the
// key and value are the same. This is useful when generating
// classes with mixed types.
// ==========================================================================
// !! IMPORTANT !! values must be bracketed with parentheses
// Usage: listToMap(("green", 5, 16px));
// Outputs: (green: green, 5: 5, 16px: 16px);
// ==========================================================================
@function listToMap($list) {
    $map: ();
    @each $value in $list {
        $map: map.merge( $map, ( $value: $value, ) );
    }
    @return $map;
}

// ==========================================================================
// The magic-merge function takes any number of collections (maps or
// lists) as arguments. It iterates over each collection and checks
// its type. If the collection is a list, it converts the list to a
// map using the listToMap function (which is not defined in this
// snippet). Then, it merges the collection (whether it was
// originally a map or has been converted to a map from a list) into
// a cumulative map. The function finally returns this cumulative
// map, which is a combination of all the input collections.
// ==========================================================================
@function magic-merge($collections...) {
    $map: ();
    @each $collection in $collections {
        @if meta.type-of($collection) == "list" {
            $collection: listToMap($collection);
        }
        $map: map.merge($map, $collection);
    }
    @return $map;
}
