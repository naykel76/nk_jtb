// @use '../maps_and_variables/typography' as *;
@use 'sass:color';

// NKTD: review this, I have hardcoded the text colors here, because importing
// them is causing "already loaded" errors in the build process.
$light-text: #fff !default;
$dark-text: #333 !default;
$text-color: $dark-text !default;

/// @group color-functions
///
/// Determines the appropriate text color (light or dark) based on the
/// brightness of the given background color.
///
/// Note: the return colors are linked to the light or dark text color variables
/// defined in the base variables file.
///
/// @param {Color} $bg-color - The background color to evaluate.
///
/// @return {Color} Returns `$dark-text` if the background is light, otherwise returns
/// `$light-text`.
///
/// @example scss - Usage
///
/// .light-bg-dark-text { color: text-color(white); }
///
/// .dark-bg-light-text { color: text-color(black); }

@function text-color($bg-color) {
    // return the default color if transparent
    @if color.alpha($bg-color) == 0 {
        @return $text-color;
    }

    $threshold: 186; // Lightness threshold for detecting dark/light backgrounds

    // Calculate the brightness of the background colour
    $brightness: (
        0.2126 * color.channel($bg-color, 'red', $space: rgb) + 0.7152 * color.channel($bg-color, 'green', $space: rgb) +
            0.0722 * color.channel($bg-color, 'blue', $space: rgb)
    );

    @if $brightness > $threshold {
        @return $dark-text;
    } @else {
        @return $light-text;
    }
}

// ==========================================================================
// border-contrast($bg, $opacity)
// ==========================================================================
// Returns a semi-transparent black or white based on background lightness.
//
// Uses HSL lightness to determine which gives better contrast.
// Good for accessibility, though may lack visual harmony.
//
// Pros:
// - Ensures reliable contrast on any background
// - Ideal for accessibility overlays and outlines
//
// Cons:
// - Not derived from the original colour
// - Can feel visually disconnected
//
// Best for: High-contrast elements where legibility is key

@function border-contrast($bg, $opacity: 0.15) {
    $lightness: color.channel($bg, 'lightness', $space: hsl);

    @if $lightness > 50 {
        @return color.change(black, $alpha: $opacity);
    } @else {
        @return color.change(white, $alpha: $opacity);
    }
}

// ==========================================================================
// border-tone($bg, $amount)
// ==========================================================================
// Adjusts lightness of the base colour for subtle, theme-aligned contrast.
//
// Maintains hue and saturation, adjusting only lightness.
// Results in a softer, more integrated border shade.
//
// Pros:
// - Harmonious and adaptive
// - Works with both light and dark backgrounds
//
// Cons:
// - Can be inconsistent across edge-case hues
// - May not provide strong contrast
//
// Best for: Low-contrast UI borders that blend with the theme

@function border-tone($bg, $amount: 10%) {
    $lightness: color.channel($bg, 'lightness', $space: hsl);

    @if $lightness > 50 {
        @return color.adjust($bg, $lightness: -$amount);
    } @else {
        @return color.adjust($bg, $lightness: $amount);
    }
}
