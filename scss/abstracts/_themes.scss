@use "../base/vars_base" as *;
@use "../base/vars_colors" as *;
@use "../mixins/makeSimpleColorScheme" as *;
@use "../mixins/makeColorShades" as *;

// ----------------------------------
$themes-map: (
    "primary": (
        "base": $primary,
        "color": white,
    ),
    "secondary": (
        "base": $secondary,
    ),
    "danger": (
        "base": map-get($color-map, "danger"),
        "base-light": map-get($color-map, "danger-light"),
        "color-light": map-get($color-map, "danger"),
    ),
    "success": (
        "base": map-get($color-map, "success"),
        "base-light": map-get($color-map, "success-light"),
        "color-light": map-get($color-map, "success"),
    ),
    "info": (
        "base": map-get($color-map, "info"),
        "base-light": map-get($color-map, "info-light"),
        "color-light": map-get($color-map, "info"),
    ),
    "warning": (
        "base": map-get($color-map, "warning"),
        "base-light": map-get($color-map, "warning-light"),
        "color-light": map-get($color-map, "warning"),
    ),
);

// ---------------- BEFORE YOU DO ANYTHING CRAZY ----------------
//
// So far this system works well but there are issues when it comes
// to components like buttons and boxes. The main problem is that
// the themes will not override their base styles.
//
// don't just change blindly!
//
// ---------------- BEFORE YOU DO ANYTHING CRAZY ----------------

@each $map, $properties in $themes-map {
    $base: map-get($themes-map, $map, "base");

    .#{$map} {
        @include makeSimpleColorScheme($base, $border-color: $base);

        // only creates light theme if light-base is in map
        @if (map-get($themes-map, $map, "base-light")) {
            &-light {
                background-color: map-get($themes-map, $map, "base-light");
                color: map-get($themes-map, $map, "color-light");
                border: 1px solid map-get($themes-map, $map, "color-light");
            }
        }

        // do not apply to :hover let component look after it
        &.outline:not(:hover) {
            background-color: transparent;
            border-color: $base;
            color: $base;
        }
    }
}

@each $key, $value in $color-map {
    // if the $key NOT in $themes-map
    @if (not map-has-key($themes-map, $key)) {
        // create a color class
        .#{$key} {
            @include makeSimpleColorScheme($value);
            // background: $value;
        }
    }
}

@include makeColorShades("grey", hsl(0, 0%, 7%), 9, 10);
@include makeColorShades("orange", hsl(14, 100%, 50%));
@include makeColorShades("yellow", hsl(48, 100%, 70%), 9, 3);
