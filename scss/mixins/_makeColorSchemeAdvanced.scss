@use "../base/vars_all" as *; // required to set defaults
@use "../mixins/colorSchemeSimple" as *;
@use "../functions/setTextColor" as *;

// The minimum requirement for creating a theme-map is the $base
// color, all other properties can be created intuitively.

@mixin makeColorSchemeAdvanced($theme-name, $theme-map) {
    $base: map-get($theme-map, "base");

    $color: if(map-get($theme-map, "color"), map-get($theme-map, "color"), setTextColor($base));
    $border-color: if(map-get($theme-map, "border-color"), map-get($theme-map, "border-color"), rgba(0, 0, 0, 0.1));

    $hover-bg: if(map-get($theme-map, "hover-bg"), map-get($theme-map, "hover-bg"), darken($base, 4%));
    $hover-color: if(map-get($theme-map, "hover-color"), map-get($theme-map, "hover-color"), setTextColor($hover-bg));

    .#{$theme-name} {
        background-color: $base;
        border: 1px solid $border-color;
        color: $color;

        // if there is no link color then force the default??? extra for no reason???
        // only create theme link styles if $link-color exists in map, else fall back to default
        @if (map-get($theme-map, "link-color") or map-get($theme-map, "default-links")) {
            // $link-color: map-get($theme-map, "link-color");
            $link-color: if(map-get($theme-map, "link-color"), map-get($theme-map, "link-color"), $link-color);
            $link-hover-color: if(map-get($theme-map, "link-hover-color"), map-get($theme-map, "link-hover-color"), $link-hover-color);

            a:not(a.btn){
                color: $link-color;
                &.hover,
                &:hover {
                    color: $link-hover-color;
                }
            }
        }

        // if there is a title colour, then use it
        @if (map-get($theme-map, "title-color")){
            .bx-title{
                color: map-get($theme-map, "title-color");
            }
        }

        &.withState:hover {
            background-color: $hover-bg;
            color: $hover-color;
        }

        // do not apply to :hover let component look after it
        &.outline:not(:hover) {
            background-color: transparent;
            border-color: $base;
            color: $base;
        }
    }
}

