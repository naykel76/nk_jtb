@use "../base/vars_base" as *;
@use "../functions/helpers" as *;
@use "../mixins/media" as *;
@use "sass:map";

// width utilities w-{n}rem or w-{n}px

// --------------------------------------------------------------------------
// -- WIDTH UTILITY CLASSES --
// --------------------------------------------------------------------------

$width-utilities: (
    "width": (
        "property": "width",
        "prefix": "w-",
        "values": (
            fc: fit-content,
        ),
    ),
);

@each $property, $map in $width-utilities {
    $property: map-get($map, "property");
    $utility-prefix: map-get($map, "prefix");
    $values: map-get($map, "values");

    @each $key, $v in $values {
        .#{$utility-prefix}#{$key} {
            #{$property}: $v;
        }
    }
}

// --------------------------------------------------------------------------
// -- MAKE UTILITY SIZE CLASSES --
// --------------------------------------------------------------------------

@mixin makeSizeUtilities($sizes, $unit: "rem") {
    $suffix: if($unit!= "rem", $unit, "");

    @each $size in $sizes {
        // wrap size in quotes to convert to string
        $class: "#{$size}";
        // search and escape decimals
        $class: strReplace($class, ".", "\\.");

        .w-#{$class}#{$suffix} {
            width: #{$size}#{$unit};
        }
        .h-#{$class}#{$suffix} {
            height: #{$size}#{$unit};
        }
        .wh-#{$class}#{$suffix} {
            width: #{$size}#{$unit};
            height: #{$size}#{$unit};
        }
    }
}

$rem-sizes: (1, 1.5, 2, 3, 4, 5, 10, 12, 95);
@include makeSizeUtilities($rem-sizes);

$pixel-sizes: (16, 24, 32, 40, 64, 100, 150, 200, 300, 400, 600);
@include makeSizeUtilities($pixel-sizes, "px");

// --------------------------------------------------------------------------
// -- FRACTIONAL SIZES --
// --------------------------------------------------------------------------

$fractional-sizes: (1\/4: 25%, 1\/3: 33.33%, 1\/2: 50%, 3\/4: 75%);

@each $key, $value in $fractional-sizes {
    .w-#{$key} {
        width: $value;
    }
}

$v-heights: (
    // 40: 40vh,
    // 50: 50vh,
    // 60: 60vh,
    100: 100vh
);

// vertical heights
// ----------------------------
@each $key, $value in $v-heights {
    .vh#{$key} {
        height: $value;
    }
}

$max-min-sizes: (
    200: 200px,
    300: 300px,
    400: 400px,
    600: 600px,
    800: 800px,
);

.h-1\/1{
    height: 100%;
}

@each $key, $value in $max-min-sizes {
    .minw#{$key} {
        // this seems very redundant!!
        // width: Max($value, 1%); // 1.
        min-width: $value; // 1.
    }
    // max-width, up to max of n%
    .maxw#{$key} {
        // Think of the min() value as providing the maximum value a property
        // can have. chooses the minimum of the two

        // this allows shring?????
        max-width: $value;
        // width: Min($value, 95%); // 1. use capital so sass does not throw an error
    }
}

// @include from-tablet {
//     @each $key, $value in $fractional-sizes {
//         .md\:w-#{$key} {
//             width: $value;
//         }
//     }
// }

// @include from-laptop {
//     @each $key, $value in $fractional-sizes {
//         .lg\:w-#{$key} {
//             width: $value;
//         }
//     }
// }

// @include from-desktop {
//     @each $key, $value in $fractional-sizes {
//         .xl\:w-#{$key} {
//             width: $value;
//         }
//     }
// }

