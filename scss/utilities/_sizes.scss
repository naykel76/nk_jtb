@use "../base/vars_base" as *;
@use "../functions/helpers" as *;
@use "../mixins/media" as *;
@use "../mixins/makeMagicClass" as *;
@use "sass:map";

// --------------------------------------------------------------------------
// -- WIDTH AND HEIGHT UTILITY CLASSES --
// --------------------------------------------------------------------------

$size-utilities: (
    "width": (
        "prefix": "w-",
        "values": (
            fc: fit-content,
            full: 100%,
            screen: 100vw,
            // min: min-content,
            // max: max-content,
            // fit: fit-content,
        ),
    ),
    "height": (
        "prefix": "h-",
        "values": (
            fc: fit-content,
            full: 100%,
            screen: 100vh,
        ),
    ),
);

@each $property, $map in $size-utilities {
    $prefix: map-get($map, "prefix");
    $values: map-get($map, "values");

    @each $key, $v in $values {
        .#{$prefix}#{$key} {
            #{$property}: $v;
        }
    }
}

// --------------------------------------------------------------------------
// -- MAKE MAGIC CLASSES --
// --------------------------------------------------------------------------

$magic-width-sizes: ((16 "full"), (20, "full"), (24, "full")) !default;
@include makeMagicClass(width, ($magic-width-sizes), "w");

// --------------------------------------------------------------------------
// -- MAKE UTILITY SIZE CLASSES --
// --------------------------------------------------------------------------

@mixin makeSizeUtilities($sizes, $unit: "rem") {
    $suffix: if($unit!= "rem", $unit, "");

    @each $size in $sizes {
        // wrap size in quotes to convert to string
        $class: "#{$size}";
        // search and escape decimals
        $class: strReplace($class, ".", "\\.");

        .w-#{$class}#{$suffix} {
            width: #{$size}#{$unit};
        }
        .h-#{$class}#{$suffix} {
            height: #{$size}#{$unit};
        }
        .wh-#{$class}#{$suffix} {
            width: #{$size}#{$unit};
            height: #{$size}#{$unit};
        }
    }
}

$rem-sizes: (0, 1, 1.5, 2, 3, 4, 5, 10, 12, 14, 16, 18, 20, 22, 24);
@include makeSizeUtilities($rem-sizes);

$pixel-sizes: (16, 24, 32, 40, 64, 100, 150, 200, 300, 400, 600);
@include makeSizeUtilities($pixel-sizes, "px");

// --------------------------------------------------------------------------
// -- FRACTIONAL SIZES --
// --------------------------------------------------------------------------

$fractional-sizes: (1\/4: 25%, 1\/3: 33.33%, 1\/2: 50%, 3\/4: 75%);

@each $key, $value in $fractional-sizes {
    .w-#{$key} {
        width: $value;
    }
}

$v-heights: (
    60: 60vh,
    80: 80vh,
    100: 100vh,
);

// vertical heights
// ----------------------------
@each $key, $value in $v-heights {
    .vh#{$key} {
        height: $value;
    }
}

$max-min-sizes: (
    200: 200px,
    300: 300px,
    400: 400px,
    600: 600px,
    800: 800px,
    "md": $md,
    "lg": $lg,
);

.h-1\/1 {
    height: 100%;
}

.maxw-full {
    max-width: 100%;
}

@each $key, $value in $max-min-sizes {
    .minw-#{$key} {
        // this seems very redundant!!
        // width: Max($value, 1%); // 1.
        min-width: $value; // 1.
    }
    // max-width, up to max of n%
    .maxw-#{$key} {
        // Think of the min() value as providing the maximum value a property
        // can have. chooses the minimum of the two
        max-width: $value;
        // width: Min($value, 95%); // 1. use capital so sass does not throw an error
    }
}
