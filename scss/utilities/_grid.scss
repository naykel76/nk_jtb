@use "../mixins/media" as *;
@use "../base/vars_base" as *;
@use "sass:map";

// --------------------------------------------------------------------------
// -- GRID --
// --------------------------------------------------------------------------

.grid {
    display: grid;
    gap: $grid-gap;
}

// --------------------------------------------------------------------------
// -- GRID GAP --
// --------------------------------------------------------------------------

// default grid gap does not play well wen placed inside the map
.gg {
    gap: $grid-gap;
}

// responsive grid gap
.gg-3-1-1 {
    gap: 1rem !important;
    @include from-desktop {
        gap: 3rem !important;
    }
}

$grid-gaps-map: (
    "0": 0,
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
);

@each $key, $value in $grid-gaps-map {
    .gg-#{$key} {
        gap: #{$value}rem;
    }
}

// --------------------------------------------------------------------------
// -- FIXED WIDTHS --
// --------------------------------------------------------------------------
@for $i from 1 through $num-grid-cols {
    .cols-#{$i} {
        grid-template-columns: repeat($i, minmax(0, 1fr));
    }
}

.cols-30\:70 {
    grid-template-columns: 3fr 7fr; // 30% 70%;
}

// --------------------------------------------------------------------------
// -- RESPONSIVE GRID FIXED WIDTH COLUMNS --
// --------------------------------------------------------------------------
// simply add the amount of columns you want a each break point
$fixed-width-columns-map: ((2, 2, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (4, 2, 1), (6, 3, 1));

@each $grid-list in $fixed-width-columns-map {
    // create the class based on the items in each grid map
    .cols-#{nth($grid-list, 1)}-#{nth($grid-list, 2)}-#{nth($grid-list, 3)} {
        grid-template-columns: repeat(nth($grid-list, 3), 1fr);
        @include from-tablet {
            grid-template-columns: repeat(nth($grid-list, 2), 1fr);
        }
        @include from-desktop {
            grid-template-columns: repeat(nth($grid-list, 1), 1fr);
        }
    }
}

// --------------------------------------------------------------------------
// -- MAGIC GRID CLASSES --
// --------------------------------------------------------------------------
// -- DO NOT -- use px or % or shit gets real! use 'fr' units

// these back slash is to escape the colon
.cols-60\:40-50\:50-100 {
    @include from-tablet {
        grid-template-columns: repeat(2, 1fr);
    }
    @include from-desktop {
        grid-template-columns: 3fr 2fr; // 60% 40%;
    }
}
.cols-40\:60-50\:50-100 {
    @include from-tablet {
        grid-template-columns: repeat(2, 1fr);
    }

    @include from-desktop {
        grid-template-columns: 2fr 3fr; // 40% 60%;
    }
}

// --------------------------------------------------------------------------
// --  --
// --------------------------------------------------------------------------

.cols-4-4-2-1 {
    grid-template-columns: repeat(1, minmax(0, 1fr));

    @include from-tablet {
        grid-template-columns: repeat(2, minmax(0, 1fr));
    }

    @include from-laptop {
        grid-template-columns: repeat(4, minmax(0, 1fr));
    }
}

.cols-4-3-2-1 {
    grid-template-columns: repeat(1, minmax(0, 1fr));

    @include from-tablet {
        grid-template-columns: repeat(2, minmax(0, 1fr));
    }

    @include from-laptop {
        grid-template-columns: repeat(3, minmax(0, 1fr));
    }

    @include from-desktop {
        grid-template-columns: repeat(4, minmax(0, 1fr));
    }
}

// responsive grid
// -------------------------
// for each breakpoint (xs, sm, etc ...) in breakpoints
@each $breakpoint, $size in map.remove($breakpoints, "xs") {
    // create a media query with min-width of $size
    @media (min-width: $size) {
        // create num-cols + 1 for 0 index
        @for $i from 1 to $num-grid-cols + 1 {
            .cols-#{$breakpoint}-#{$i} {
                grid-template-columns: repeat($i, minmax(0, 1fr));
            }
        }
    }
}
